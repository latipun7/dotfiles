#!/usr/bin/env bash
#
# Bootstrap packages (install packages)

set -euo pipefail

! (umask | grep -q 022) && umask 022

# shellcheck source=lib/_functions.sh
source "$DOTFILES/linux/bin/lib/_functions.sh"

###############################################
#           Update and upgrade APT            #
###############################################

info 'Update and upgrade packages from APT'
if [ -z ${CI:+true} ]; then
  # if CI is unset / null (zero)
  sudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y
else
  sudo apt-get update && sudo apt-get dist-upgrade -y && sudo apt-get autoremove -y
fi
sudo -v
success 'Upgraded successfully'

###############################################
#            Homebrew / Linuxbrew             #
###############################################

# Install brew only on 64-bit x86_64 CPU arch
if [[ "$(uname -a)" == *x86_64* ]]; then
  # install homebrew if it's not installed otherwise update brew
  if hash brew 2>/dev/null; then
    info 'Update brew formulas'
    brew update
    success 'Formulas updated'
  else
    info 'Install homebrew (linuxbrew)'
    bash -c "$(curl -fsLS https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    success 'Homebrew (linuxbrew) installed successfully'
  fi
  sudo -v

  info 'Add brew to PATH and update requirements'
  if [ -z ${CI:+true} ]; then
    # if CI is unset / null (zero)
    sudo apt install build-essential procps curl file git -y
  else
    sudo apt-get install build-essential procps curl file git -y
  fi
  sudo -v

  [ -d "/home/linuxbrew/.linuxbrew" ] &&
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  # check homebrew if available in non-sudo installs
  [ -d "$HOME/.linuxbrew" ] &&
    eval "$("$HOME/.linuxbrew/bin/brew" shellenv)"
  success 'brew added to PATH and requirement updated successfully'
fi

###############################################
#              Installing Stuff               #
###############################################

info 'Installing/upgrading all fun stuff ...'

#===================#
#   Brew Specific   #
#===================#

# Install with brew only on 64-bit x86_64 CPU arch
if [[ "$(uname -a)" == *x86_64* ]]; then
  # Upgrade any already-installed formulae.
  brew upgrade
  sudo -v

  # Install packages with brew
  if [ -s "$HOME/.Brewfile" ]; then
    step "Install packages with brew"
    brew bundle --global --no-lock -v
  else
    fail ".Brewfile not found on home directory."
  fi
  sudo -v

  # Remove outdated versions from the cellar.
  info 'Cleanup outdated versions from brew cellar.'
  brew cleanup
  brew bundle cleanup --global -f
  sudo -v
fi

#===================#
#    If not Brew    #
#===================#

# Install with this if not on 64-bit x86_64 CPU arch
if [[ "$(uname -a)" != *x86_64* ]]; then
  # shellcheck source=lib/_apt-packages.sh
  source "$DOTFILES/linux/bin/lib/_apt-packages.sh"
fi

#===================#
#    Node + Yarn    #
#===================#

# Install node if node didn't installed,
# shellcheck disable=SC2016
hash fnm &>/dev/null && eval "$(fnm env --shell zsh | sed -e 's/PATH="\(.*\)":\$PATH/PATH="\1:$PATH"/g')"
if ! hash node &>/dev/null; then
  step "Install Node"
  fnm install lts/fermium && fnm use lts/fermium
fi

# Install yarn if has node but not has yarn
if hash node 2>/dev/null && ! hash yarn 2>/dev/null; then
  step "Install Yarn"
  curl -fsLSo- https://yarnpkg.com/install.sh | bash
fi

# Install/Update Global Node Modules
if hash node 2>/dev/null && hash yarn 2>/dev/null; then
  step "Install Global Node Modules via Yarn"

  # Install bitwarden-cli
  ! hash bw 2>/dev/null && yarn global add @bitwarden/cli

  # Install these if not WSL
  if [[ "$(uname -a)" != *[Mm]icrosoft* ]]; then
    # Install PM2
    ! hash pm2 2>/dev/null && yarn global add pm2
  fi

  # Update yarn global packages
  step "Update Node Global Packages via Yarn"
  yarn global upgrade -s
fi

sudo -v

#===================#
#   Python Moduls   #
#===================#

# Python Modules
step "Install/upgrade Python Modules"
python3 -m pip install --upgrade pip # upgrade pip
pip3 install --upgrade psutil
pip3 install --upgrade pynvim

sudo -v

#===================#

# Setup vims
info 'Install/update vim-plug'
curl -fsLSo "$HOME/.vim/autoload/plug.vim" --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
ln -sf "$HOME/.vim/autoload/plug.vim" "$HOME/.config/nvim/autoload/"
[ -z ${CI:+true} ] && vim +PlugUpgrade +PlugUpdate +qall
success 'Vim-plug and plugins installed and already up-to-date'

# Install OMZ if .oh-my-zsh directory not already in home
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  info 'Install OMZ'
  sh -c "$(curl -fsLS https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
    "" --unattended --keep-zshrc
  success 'OMZ installed successfully'
fi
sudo -v

success 'All stuff installed and already up-to-date'

###############################################
#                Miscellaneous                #
###############################################

# Git credentials netrc
info 'Setup Git credentials netrc'
FILE=/usr/share/doc/git/contrib/credential/netrc/git-credential-netrc
if [ -f "$FILE" ]; then
  sudo chmod +x "$FILE"
else
  sudo curl -fsLSo "$FILE" \
    https://raw.githubusercontent.com/git/git/master/contrib/credential/netrc/git-credential-netrc.perl
  sudo chmod +x "$FILE"
fi

# Switch default shell
if [[ "$(uname -a)" == *x86_64* ]]; then
  PATH_PREFIX=$(brew --prefix 2>/dev/null || echo '/usr/bin/')
  if ! grep -q "$PATH_PREFIX/bin/zsh" /etc/shells; then
    info 'Make zsh installed from brew to default shell'
    echo "$PATH_PREFIX/bin/zsh" | sudo tee -a /etc/shells
    sudo sed -i s/required/sufficient/g /etc/pam.d/chsh
    chsh -s "$PATH_PREFIX/bin/zsh"
    success 'Changed to zsh shell from brew installed zsh'
  fi
fi

###############################################

success 'All done!'

#!/usr/bin/env bash
#
# Bootstrap packages (install packages)

set -euo pipefail

! (umask | grep -q 022) && umask 022

function info() {
  echo -e "\n  \e[1;35m==>\e[0m $1 ℹ\n"
}

function step() {
  echo -e "\n\e[2K  \e[0;94m==>\e[0m $1\n"
}

function success() {
  echo -e "\n\e[2K  \e[0;32m==>\e[0m $1 ✅\n"
}

function fail() {
  echo -e "\n\e[2K  \e[0;31m==>\e[0m $1 ❌\n"
  echo ''
  exit 1
}

info 'Update and upgrade packages from official source.list'
if [ -z ${CI+x} ]; then
 sudo apt-get update && sudo apt-get dist-upgrade -y && apt-get autoremove
else
  sudo apt update && sudo apt full-upgrade -y && apt autoremove
fi
sudo -v
success 'Upgraded successfully'

# install homebrew if it's not installed otherwise update brew
if hash brew 2>/dev/null; then
  info 'Update brew formulas'
  brew update
  success 'Formulas updated'
else
  info 'Install homebrew (linuxbrew)'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  success 'Homebrew (linuxbrew) installed successfully'
fi
sudo -v

info 'Add brew to PATH'
sudo -v
[ -d "/home/linuxbrew/.linuxbrew" ] &&
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# check homebrew if available in non-sudo installs
[ -d "$HOME/.linuxbrew" ] &&
  eval "$("$HOME/.linuxbrew/bin/brew" shellenv)"
success 'brew added to PATH successfully'

# Installing stuff
info 'Installing/upgrading all fun stuff ...'

# Upgrade any already-installed formulae.
brew upgrade
sudo -v

# Install yarn
hash node 2>/dev/null &&
  ! hash yarn 2>/dev/null &&
  step "Install Yarn"
  curl -o- -L https://yarnpkg.com/install.sh | bash

# Install packages with brew
if [ -s "$HOME/.Brewfile" ]; then
  step "Install packages with brew"
  brew bundle --global --no-lock -v
else
  fail ".Brewfile not found on home directory."
fi
sudo -v

# Python Modules
step "Install/upgrade Python Modules"
python3 -m pip install --upgrade pip # upgrade pip
pip3 install --upgrade psutil
pip3 install --upgrade pynvim

sudo -v

# Install postgreSQL
step "Install PostgreSQL"
if ! hash psql 2>/dev/null; then
  sudo apt install postgresql postgresql-contrib -y
fi

# Install these if not WSL
if [[ "$(uname -a)" != *[Mm]icrosoft* ]]; then
  # Install nginx
  if [ ! -f /etc/apt/sources.list.d/nginx.list ]; then
    step "Install nginx"
    echo "deb http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx" |
      sudo tee /etc/apt/sources.list.d/nginx.list
    curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -
    sudo apt-key fingerprint ABF5BD827BD9BF62
    sudo apt update
    sudo apt install nginx -y
  fi

  # Install docker
  if [ ! -f /etc/apt/sources.list.d/docker.list ]; then
    step "Install docker"
    echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" |
      sudo tee /etc/apt/sources.list.d/docker.list
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88
    sudo apt update
    sudo apt install docker-ce docker-ce-cli containerd.io -y
    sudo systemctl enable docker
    sudo mkdir -p /etc/systemd/system/docker.service.d
    sudo touch /etc/systemd/system/docker.service.d/override.conf
    echo -e '[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375' |
      sudo tee -a /etc/systemd/system/docker.service.d/override.conf &>/dev/null
    sudo systemctl daemon-reload
    sudo systemctl restart docker.service
  fi

  # Setup certbot
  if hash docker 2>/dev/null; then
    if [ ! -d "/etc/letsencrypt" ]; then
      step "Install certbot"
      sudo docker run -it --rm --name certbot \
        -v "/etc/letsencrypt:/etc/letsencrypt" \
        -v "/var/lib/letsencrypt:/var/lib/letsencrypt" \
        -v "$HOME/.secrets:$HOME/.secrets" \
        certbot/dns-digitalocean certonly \
        --dns-digitalocean-credentials "$HOME/.secrets/digitalocean.ini" \
        --server https://acme-v02.api.letsencrypt.org/directory \
        -d ruppy.io,*.ruppy.io
    fi
  fi

  # Setup OpenVPN
  if [ ! -f "$HOME/openvpn-install.sh" ]; then
    step "Install OpenVPN"
    curl -fsSLo "$HOME/openvpn-install.sh" https://git.io/vpn &&
      sudo bash "$HOME/openvpn-install.sh"
  fi

  # Install PM2
  if hash node 2>/dev/null && hash yarn 2>/dev/null && ! hash pm2; then
    step "Install PM2"
    yarn global add pm2
  fi
fi

# Update yarn global packages
step "Update Yarn Global Packages"
yarn global upgrade -s

sudo -v

success 'All stuff installed and already up-to-date'

# Remove outdated versions from the cellar.
info 'Cleanup outdated versions from brew cellar.'
brew cleanup
brew bundle cleanup --global -f
sudo -v

# Setup vims
info 'Install/update vim-plug'
curl -fsSLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
ln -sf "$HOME/.vim/autoload/plug.vim" "$HOME/.config/nvim/autoload/"
vim +PlugInstall +qall
success 'Vim-plug and plugins installed and already up-to-date'

# Git credentials netrc
info 'Setup Git credentials netrc'
FILE=/usr/share/doc/git/contrib/credential/netrc/git-credential-netrc
if [ -f "$FILE" ]; then
  sudo chmod +x "$FILE"
else
  sudo curl -fsSLo "$FILE" \
    https://raw.githubusercontent.com/git/git/master/contrib/credential/netrc/git-credential-netrc.perl
  sudo chmod +x "$FILE"
fi

# Install OMZ if .oh-my-zsh directory not already in home
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  info 'Install OMZ'
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
    "" --unattended --keep-zshrc
  success 'OMZ installed successfully'
fi
sudo -v

# Switch default shell to zsh from brew
BREW_PREFIX=$(brew --prefix)
if ! grep -q "$BREW_PREFIX/bin/zsh" /etc/shells; then
  info 'Make zsh installed from brew to default shell'
  echo "$BREW_PREFIX/bin/zsh" | sudo tee -a /etc/shells
  sudo sed -i s/required/sufficient/g /etc/pam.d/chsh
  chsh -s "$BREW_PREFIX/bin/zsh"
  success 'Changed to zsh shell from brew installed zsh'
fi

success 'All done!'

#!/usr/bin/env bash

if [ -z "$DOTFILES" ]; then
  DOTDIR="$HOME/.files"
else
  DOTDIR="$DOTFILES"
fi

BOTDIR="$DOTDIR/.bot"
ANSIDIR="$DOTDIR/ansi-arts"
P10KDIR="$DOTDIR/linux/oh-my-zsh/themes/powerlevel10k"
OTMUXDIR="$DOTDIR/linux/tmux/oh-my-tmux"
AUTODIR="$DOTDIR/linux/oh-my-zsh/plugins/zsh-autosuggestions"
COMPDIR="$DOTDIR/linux/oh-my-zsh/plugins/zsh-completions"
NVMDIR="$DOTDIR/linux/oh-my-zsh/plugins/zsh-nvm"
SYNTDIR="$DOTDIR/linux/oh-my-zsh/plugins/zsh-syntax-highlighting"

function install_script() {
  bash -c "$(curl -fsSL https://ruppy.io/install-dotfiles)"
}

function install() {
  if [ -d "$DOTDIR" ]; then
    "$DOTDIR/install.sh"
  else
    install_script
  fi
}

function update() {
  if [ -d "$DOTDIR" ]; then
    if [[ $# -eq 1 ]]; then
      git -C "$DOTDIR" fetch origin
      git -C "$DOTDIR" reset --hard origin/main
      git -C "$DOTDIR" submodule sync --recursive
      git -C "$DOTDIR" submodule update --init --recursive
      exit
    fi

    while [[ $# -gt 1 ]]; do
      case "$2" in
        bot|dotbot)
          git -C "$BOTDIR" fetch --depth 1
          git -C "$BOTDIR" checkout FETCH_HEAD
          exit
        ;;
        ansi|ansi-arts)
          git -C "$ANSIDIR" fetch --depth 1
          git -C "$ANSIDIR" checkout FETCH_HEAD
          exit
        ;;
        p10k|powerlevel10k)
          git -C "$P10KDIR" fetch --depth 1
          git -C "$P10KDIR" checkout FETCH_HEAD
          exit
        ;;
        tmux|oh-my-tmux)
          git -C "$OTMUXDIR" fetch --depth 1
          git -C "$OTMUXDIR" checkout FETCH_HEAD
          exit
        ;;
        autosuggestions|zsh-autosuggestions)
          git -C "$AUTODIR" fetch --depth 1
          git -C "$AUTODIR" checkout FETCH_HEAD
          exit
        ;;
        completions|zsh-completions)
          git -C "$COMPDIR" fetch --depth 1
          git -C "$COMPDIR" checkout FETCH_HEAD
          exit
        ;;
        nvm|zsh-nvm)
          git -C "$NVMDIR" fetch --depth 1
          git -C "$NVMDIR" checkout FETCH_HEAD
          exit
        ;;
        syntax|zsh-syntax|highlighting|zsh-syntax-highlighting)
          git -C "$SYNTDIR" fetch --depth 1
          git -C "$SYNTDIR" checkout FETCH_HEAD
          exit
        ;;
        all)
          git -C "$BOTDIR" fetch --depth 1
          git -C "$BOTDIR" checkout FETCH_HEAD
          git -C "$ANSIDIR" fetch --depth 1
          git -C "$ANSIDIR" checkout FETCH_HEAD
          git -C "$P10KDIR" fetch --depth 1
          git -C "$P10KDIR" checkout FETCH_HEAD
          git -C "$OTMUXDIR" fetch --depth 1
          git -C "$OTMUXDIR" checkout FETCH_HEAD
          git -C "$AUTODIR" fetch --depth 1
          git -C "$AUTODIR" checkout FETCH_HEAD
          git -C "$COMPDIR" fetch --depth 1
          git -C "$COMPDIR" checkout FETCH_HEAD
          git -C "$NVMDIR" fetch --depth 1
          git -C "$NVMDIR" checkout FETCH_HEAD
          git -C "$SYNTDIR" fetch --depth 1
          git -C "$SYNTDIR" checkout FETCH_HEAD
          exit
        ;;
        *)
          echo "Accepted value is bot, ansi, p10k, tmux, autosuggestions, completions, nvm, and syntax."
          exit 1
        ;;
      esac
    done
  else
    install_script
  fi
}


if [[ $# -eq 0 ]]; then
  install
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--install)
      install
      exit
    ;;
    -u|--update)
      update "$@"
      exit
    ;;
    *)
      echo -e "\e[1;35mdotfiles\e[0m <\e[1;35m-i\e[0m|\e[1;35m--install\e[0m> to install dotfiles or \e[1;35mdotfiles\e[0m <\e[1;35m-u\e[0m|\e[1;35m--update\e[0m> to update dotfiles."
      exit 1
    ;;
  esac
done

# -*-zsh-*- vim:ft=zsh
# code:language=shellscript

source "$HOME/.local/bin/_functions"

# ░█░█░█▀▄░█▀▀░░░█▀▄░█▀█░█▀▀░█▀▀░░░█▀▄░▀█▀░█▀▄
# ░▄▀▄░█░█░█░█░░░█▀▄░█▀█░▀▀█░█▀▀░░░█░█░░█░░█▀▄
# ░▀░▀░▀▀░░▀▀▀░░░▀▀░░▀░▀░▀▀▀░▀▀▀░░░▀▀░░▀▀▀░▀░▀

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# ░█▀█░█▀█░▀█▀░█░█░█▀▀
# ░█▀▀░█▀█░░█░░█▀█░▀▀█
# ░▀░░░▀░▀░░▀░░▀░▀░▀▀▀

# Make linuxbrew PATH available before sourcing OMZ
if hash brew 2>/dev/null; then
  eval "$(brew shellenv)"
elif [[ "$OSTYPE" == linux-gnu ]]; then
  [ -d "/home/linuxbrew/.linuxbrew" ] &&
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  [ -d "$HOME/.linuxbrew" ] &&
    eval "$("$HOME/.linuxbrew/bin/brew" shellenv)"
elif [[ "$OSTYPE" == darwin* ]]; then
  [ -d "/usr/local/Cellar" ] &&
    eval "$(/usr/local/bin/brew shellenv)"
else
  echo "homebrew not available in the current OS type."
fi

# Custom path
! (echo "$PATH" | grep -q "$HOME/.local/bin") && homeexe="$HOME/.local/bin"
hash cargo 2>/dev/null && cargoexe="$XDG_DATA_HOME/cargo/bin"
brewpythonexe=$(hash brew 2>/dev/null && echo "$(brew --prefix)/opt/python/libexec/bin")

pathexe=("$homeexe" "$cargoexe" "$brewpythonexe" "$PATH")

PATH=$(concat ":" "${pathexe[@]}")
export PATH

# Node global module require path
if hash fnm 2>/dev/null && hash node 2>/dev/null; then
  nodelink=$(readlink -e "$(which node)")
  NODE_PATH=$(cd "${nodelink:0:-4}../lib/node_modules" && pwd)
  export NODE_PATH
fi

# ░█▀▄░█▀▀░█▀▀░█▀█░█░█░█░░░▀█▀░█▀▀
# ░█░█░█▀▀░█▀▀░█▀█░█░█░█░░░░█░░▀▀█
# ░▀▀░░▀▀▀░▀░░░▀░▀░▀▀▀░▀▀▀░░▀░░▀▀▀

# Editor
if hash code 2>/dev/null; then
  export VISUAL="code --wait"
  export EDITOR="code --wait"
elif [[ "${TERM_PROGRAM:-tty}" == *vscode* ]]; then
  export VISUAL="code --wait"
  export EDITOR="code --wait"
elif hash lvim 2>/dev/null; then
  export VISUAL=lvim
  export EDITOR=lvim
else
  export VISUAL=nvim
  export EDITOR=nvim
fi

# Browser
if [ -n "$DISPLAY" ]; then
  export BROWSER=vivaldi-stable
else
  export BROWSER=lynx
fi

# ░▀█▀░█░█░█▀▀░█▀█░█░█░█▀▀
# ░░█░░█▄█░█▀▀░█▀█░█▀▄░▀▀█
# ░░▀░░▀░▀░▀▀▀░▀░▀░▀░▀░▀▀▀

# `fnm` setup
if hash fnm &>/dev/null; then
  export FNM_DIR="$XDG_DATA_HOME/fnm"

  if [[ -z "$TTY" ]]; then
    eval "$(fnm env --shell=bash)"
  else
    eval "$(fnm env --use-on-cd)"
  fi
fi

# `nnn` configs
if hash nnn 2>/dev/null; then
  # Using terminal colors (catppuccin mocha)
  BLK="03" CHR="03" DIR="04" EXE="02" REG="07" HARDLINK="05" SYMLINK="05"
  MISSING="08" ORPHAN="01" FIFO="06" SOCK="03" UNKNOWN="01"

  export NNN_COLORS="#04020301;4231"
  export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$UNKNOWN"
  export NNN_OPTS="aeEUHx"
  export NNN_ARCHIVE="\\.(7z|a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)$"
  export NNN_BMS="e:/etc;s:/usr/share;c:$XDG_CONFIG_HOME;h:$XDG_DATA_HOME/chezmoi"
  export NNN_PLUG='p:preview-tui;o:fzopen;e:suedit;u:getplugs'
  export NNN_TRASH=2
fi

# fzf configs
if hash fzf 2>/dev/null; then
  # catppuccin mocha colors
  export FZF_DEFAULT_OPTS=" \
    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"
fi

# Rust
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export CARGO_HOME="$XDG_DATA_HOME/cargo"

# Go
export GOPATH="$XDG_DATA_HOME/go"

# Wakatime
export WAKATIME_HOME="$XDG_CONFIG_HOME/wakatime"

# postgreSQL
if hash psql 2>/dev/null; then
  mkdir -p "$XDG_CONFIG_HOME/pg" && mkdir -p "$XDG_STATE_HOME"

  export PSQLRC="$XDG_CONFIG_HOME/pg/psqlrc"
  export PGPASSFILE="$XDG_CONFIG_HOME/pg/pgpass"
  export PSQL_HISTORY="$XDG_STATE_HOME/psql_history"
  export PGSERVICEFILE="$XDG_CONFIG_HOME/pg/pg_service.conf"
fi

# Uniform look for Qt and GTK apps
# https://wiki.archlinux.org/title/Uniform_look_for_Qt_and_GTK_applications
export QT_QPA_PLATFORMTHEME=qt5ct

# Invoking gpg-agent
# https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
# GPG_TTY="$(tty)"
# see: https://github.com/romkatv/powerlevel10k/issues/524
export GPG_TTY="$TTY"

# Batman syntax highlight for man pages -> https://github.com/sharkdp/bat#man
hash bat 2>/dev/null && export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# Misc
export LESS='--RAW-CONTROL-CHARS --ignore-case'
export FORCE_COLOR=true

# ░█▀█░█▀▄░▀█▀░█░█░█▀█░▀█▀░█▀▀░░░█▀▀░█▀█░█░█
# ░█▀▀░█▀▄░░█░░▀▄▀░█▀█░░█░░█▀▀░░░█▀▀░█░█░▀▄▀
# ░▀░░░▀░▀░▀▀▀░░▀░░▀░▀░░▀░░▀▀▀░░░▀▀▀░▀░▀░░▀░

if [ -f "$HOME/.zshenv.private" ]; then
  source "$HOME/.zshenv.private"
fi

# ░█▀▀░█░█░█▀▀░▀█▀░█▀█░█▄█░░░█▀▀░█▀█░█░█
# ░█░░░█░█░▀▀█░░█░░█░█░█░█░░░█▀▀░█░█░▀▄▀
# ░▀▀▀░▀▀▀░▀▀▀░░▀░░▀▀▀░▀░▀░░░▀▀▀░▀░▀░░▀░

if [ -f "$HOME/.zshenv.custom" ]; then
  source "$HOME/.zshenv.custom"
fi

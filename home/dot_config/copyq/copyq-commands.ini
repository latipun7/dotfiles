[Commands]
1\Command="/*\nThis adds support for Hyprland sessions.\n\nThis requires:\n- `ydotool` utility to send copy/paste shortcuts to applications\n- `grim` for taking screenshot\n- `slurp` for selecting screenshot area\n\nGlobal shortcut commands can be triggered with:\n\n    copyq triggerGlobalShortcut {COMMAND_NAME}\n\nLinks:\n- https://github.com/ReimuNotMoe/ydotool\n- https://github.com/emersion/grim\n- https://github.com/emersion/slurp\n*/\n\nfunction isHypr() {\n    return env('HYPRLAND_INSTANCE_SIGNATURE').length != 0\n}\n\nfunction run() {\n    var p = execute.apply(this, arguments)\n    if (!p) {\n        throw 'Failed to start ' + arguments[0]\n    }\n    if (p.exitCode && p.stderr.length) {\n        throw 'Failed command ' + arguments[0] + ': ' + str(p.stderr)\n    }\n    return p.stdout\n}\n\nfunction hyprActiveWindow() {\n    var window = run('hyprctl', '-j', 'activewindow')\n    return JSON.parse(str(window))\n}\n\nfunction sendShortcut(...shortcut) {\n    sleep(100)\n    run('ydotool', 'key', ...shortcut)\n}\n\nglobal.currentWindowTitle = function() {\n    if (!isHypr())\n        return ''\n    var activeWindow = hyprActiveWindow()\n    return activeWindow ? activeWindow['title'] : ''\n}\n\nglobal.paste = function() {\n    sendShortcut('135:1', '135:0')\n}\n\nvar copy_ = global.copy\nglobal.copy = function() {\n    if (arguments.length == 0) {\n        sendShortcut('133:1', '133:0')\n    } else {\n        copy_.apply(this, arguments)\n    }\n}\n\nglobal.focusPrevious = function() {\n    hide()\n}\n\nvar monitorClipboard_ = monitorClipboard\nmonitorClipboard = function() {\n    return monitorClipboard_()\n}\n\nvar onClipboardChanged_ = onClipboardChanged\nonClipboardChanged = function() {\n    var title = currentWindowTitle()\n    if (title)\n        setData(mimeWindowTitle, title)\n    onClipboardChanged_()\n}\n\nscreenshot = function(format, screenName) {\n    if (isHypr())\n        return run('grim', '-t', format || 'png', '-')\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nscreenshotSelect = function(format, screenName) {\n    if (isHypr()) {\n        var geometry = run('slurp')\n        geometry = str(geometry).trim()\n        return run('grim', '-c', '-g', geometry, '-t', format || 'png', '-')\n    }\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--region',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nglobal.triggerGlobalShortcut = function(commandName) {\n    var cmds = commands()\n    for (var i in cmds) {\n        var cmd = cmds[i]\n        if (cmd.isGlobalShortcut && cmd.enable && cmd.name == commandName)\n            return action(cmd.cmd)\n    }\n    throw 'Failed to find enabled global command with given name'\n}"
1\Icon=\xf2d0
1\IsScript=true
1\Name=Wayland Support
10\Command=copyq: plugins.itemtags.tag()
10\Icon=\xf02b
10\InMenu=true
10\InternalId=copyq_tags_tag
10\Name=Add a Tag
11\Command=copyq: plugins.itemtags.untag()
11\Icon=\xf02b
11\InMenu=true
11\Input=application/x-copyq-tags
11\InternalId=copyq_tags_untag
11\Name=Remove a Tag
12\Command=copyq: plugins.itemtags.clearTags()
12\Icon=\xf02b
12\InMenu=true
12\Input=application/x-copyq-tags
12\InternalId=copyq_tags_clear
12\Name=Clear all tags
13\Command=copyq: plugins.itemencrypted.encryptItems()
13\Icon=\xf023
13\InMenu=true
13\Input=!OUTPUT
13\InternalId=copyq_encrypted_encrypt
13\Name=Encrypt (needs GnuPG)
13\Output=application/x-copyq-encrypted
13\Shortcut=ctrl+l
14\Command=copyq: plugins.itemencrypted.decryptItems()
14\Icon=\xf09c
14\InMenu=true
14\Input=application/x-copyq-encrypted
14\InternalId=copyq_encrypted_decrypt
14\Name=Decrypt
14\Output=application/x-copyq-item
14\Shortcut=ctrl+l
15\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
15\Icon=\xf13e
15\InMenu=true
15\Input=application/x-copyq-encrypted
15\InternalId=copyq_encrypted_decrypt_and_copy
15\Name=Decrypt and Copy
15\Shortcut=ctrl+shift+l
16\Command=copyq: plugins.itemencrypted.pasteEncryptedItems()
16\Icon=\xf13e
16\InMenu=true
16\Input=application/x-copyq-encrypted
16\InternalId=copyq_encrypted_decrypt_and_paste
16\Name=Decrypt and Paste
16\Shortcut=enter
2\Command="copyq:\n    var moveToTop = config('move') == 'true'\n    var activatePastes = config('activate_pastes') == 'true'\n    var activateCloses = config('activate_closes') == 'true'\n    var activateFocuses = config('activate_focuses') == 'true'\n\n    copy(mimeItems, input())\n\n    if (moveToTop)\n        move(0)\n\n    if (activateCloses)\n        hide()\n\n    if (activateFocuses || activatePastes)\n        focusPrevious()\n\n    if (activatePastes)\n        paste()"
2\Icon=\xf328
2\InMenu=true
2\Input=application/x-copyq-item
2\Name=Paste Items when Activated
2\Shortcut=enter, return
3\Automatic=true
3\Command="copyq:\n    const imageFormat = 'image/png';\n    const imageData = clipboard(imageFormat);\n    if (imageData.length > 0) {\n        setData(imageFormat, imageData);\n    }"
3\Icon=\xf302
3\Name=Save Images
4\Automatic=true
4\Icon=\xf0c5
4\Match=^(https?|ftps?|file)://
4\Name=Copy URL (web address) to other tab
4\Tab=&url
5\Command=copyq: toggle()
5\Icon=\xf022
5\InternalId=copyq_global_toggle
5\IsGlobalShortcut=true
5\Name=Show/hide main window
6\Command=copyq: plugins.itempinned.pin()
6\Icon=\xf08d
6\InMenu=true
6\Input=!OUTPUT
6\InternalId=copyq_pinned_pin
6\Name=Pin
6\Output=application/x-copyq-item-pinned
7\Command=copyq: plugins.itempinned.unpin()
7\Icon=\xf08d
7\InMenu=true
7\Input=application/x-copyq-item-pinned
7\InternalId=copyq_pinned_unpin
7\Name=Unpin
8\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
8\Icon=\xf02b
8\InMenu=true
8\InternalId=copyq_tags_tag:Important
8\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
8\Name=Tag as \x201cImportant\x201d
9\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
9\Icon=\xf02b
9\InMenu=true
9\InternalId=copyq_tags_untag:Important
9\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
9\Name=Remove tag \x201cImportant\x201d
size=16
